When would you want to use a remote repository rather than keeping all your work local?

For portability and sharing-for-collaboration purposes. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

To avoid pushing changes which are not fully tested yet.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are clones made directly in the GitHub servers. Clones can be made locally or from a GitHub repository. Branches are made locally and can later be merged/pushed to GitHub. Forks are used when you want to make changes to an existing repository without altering the original when you push your local changes. Clones are used when you want to keep things in synch with the origin repository you cloned (by pulling/pushing cahnges). Branches are used when you want to make changes without affecting the master branch (experimentation). You can later on merge branches into master if you want.

What is the benefit of having a copy of the last known state of the remote stored locally?

To check for differences, know when you are out-sync, ahead or behind and do merging when necessary, before pushing.  

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

It would be easier to share code, but would be harder to keep track of changes and revert unwanted changes to a previous version.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When I want to test something and get other people's feedback before actually adding that (merging) into master. Working directly into master is simpler, but it does not allow for collaboration and agreement between collaborators before accepting the introduced changes.
